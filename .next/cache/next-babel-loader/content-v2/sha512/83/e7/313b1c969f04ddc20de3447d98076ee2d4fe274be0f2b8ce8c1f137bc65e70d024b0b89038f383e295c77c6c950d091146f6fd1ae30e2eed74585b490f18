{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\roy\\\\Desktop\\\\ReactJS Training\\\\nextjs-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    id: props.meetupData._id,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://rdelosreyesdev:rptdr007@cluster0.lifeatf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray(); // fetch all, id field only, to array\n\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // convert to params\n\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data\n  const meetupid = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://rdelosreyesdev:rptdr007@cluster0.lifeatf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupid)\n  }); // fetch all, id field only, to array\n\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/roy/Desktop/ReactJS Training/nextjs-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","meetupData","image","_id","title","address","description","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","meetupid","selectedMeetup","findOne"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,EAAE,EAAEF,KAAK,CAACC,UAAN,CAAiBE,GAFvB;AAGE,IAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAH1B;AAIE,IAAA,OAAO,EAAEJ,KAAK,CAACC,UAAN,CAAiBI,OAJ5B;AAKE,IAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBK;AALhC;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;AAYA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,wGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAACX,IAAAA,GAAG,EAAE;AAAN,GAA1B,EAAoCY,OAApC,EAAtB,CANqC,CAMgC;;AACrEP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACjB,GAAP,CAAWoB,QAAX;AAAZ;AADsB,KAAb,CAAZ,CAFF,CAIA;;AAJA,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMd,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,wGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMe,cAAc,GAAG,MAAMhB,gBAAgB,CAACiB,OAAjB,CAAyB;AAACzB,IAAAA,GAAG,EAAEL,QAAQ,CAAC4B,QAAD;AAAd,GAAzB,CAA7B,CAR4C,CAQsC;;AAClFlB,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE0B;AADP;AADF,GAAP;AAKD;AAED,eAAe5B,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nconst MeetupDetails = (props) => {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.meetupData.image}\r\n      id={props.meetupData._id}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://rdelosreyesdev:rptdr007@cluster0.lifeatf.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupCollection.find({}, {_id: 1}).toArray(); // fetch all, id field only, to array\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })), // convert to params\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // fetch data\r\n  const meetupid = context.params.meetupId;\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://rdelosreyesdev:rptdr007@cluster0.lifeatf.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n  const selectedMeetup = await meetupCollection.findOne({_id: ObjectId(meetupid)}); // fetch all, id field only, to array\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: selectedMeetup,\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}